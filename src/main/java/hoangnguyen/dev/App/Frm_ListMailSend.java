/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hoangnguyen.dev.App;

import hoangnguyen.dev.Protocol.ImapClient;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dell
 */
public class Frm_ListMailSend extends javax.swing.JFrame {
    private ImapClient imapClient;
    private DefaultListModel<String> listModel;
    private String imapHost;
    private int imapPort;
    private String userEmail;
    private String password;
    private List<Email> emails;
    /**
     * Creates new form frmHome
     */
    public Frm_ListMailSend(){
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMailSent = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_message = new javax.swing.JTextArea();
        txt_senderName = new javax.swing.JTextField();
        txt_sentDate = new javax.swing.JTextField();
        lb_subject = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_recipient = new javax.swing.JTextField();
        txt_attachmentFile = new javax.swing.JTextField();
        btn_attachment = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        btn_home = new javax.swing.JMenu();
        jmenu_exit = new javax.swing.JMenuItem();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("SENT MAIL LIST");

        listMailSent.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listMailSent.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listMailSentValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listMailSent);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Sender:");

        jLabel3.setText("Sent date:");

        txt_message.setColumns(20);
        txt_message.setRows(5);
        txt_message.setEnabled(false);
        jScrollPane2.setViewportView(txt_message);

        txt_senderName.setEnabled(false);

        txt_sentDate.setEnabled(false);

        lb_subject.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lb_subject.setText("Subject");

        jLabel4.setText("Recipient:");

        txt_recipient.setEnabled(false);

        txt_attachmentFile.setText("No attachment");
        txt_attachmentFile.setEnabled(false);

        btn_attachment.setText("Save As");
        btn_attachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_attachmentActionPerformed(evt);
            }
        });

        jLabel5.setText("Attached file:");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(lb_subject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_sentDate))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_attachmentFile, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_attachment))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(5, 5, 5)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_recipient, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .addComponent(txt_senderName))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_subject)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_senderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_recipient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_sentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_attachmentFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_attachment)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btn_home.setText("Home");
        btn_home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_homeActionPerformed(evt);
            }
        });

        jmenu_exit.setText("Exit");
        jmenu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenu_exitActionPerformed(evt);
            }
        });
        btn_home.add(jmenu_exit);

        jMenuBar1.add(btn_home);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Frm_ListMailSend(String imapHost, int imapPort, String userEmail, String password) {
        this.userEmail = userEmail;
        this.password = password;
        this.imapHost = imapHost;
        this.imapPort = imapPort;
        initComponents();
        setupImapClient();
        btn_attachment.setEnabled(false);
    }
    
    private void setupImapClient(){
        imapClient = new ImapClient();
        listModel = new DefaultListModel<>();
        listMailSent.setModel(listModel);
        try{
            imapClient.connect(MailConfig.imapHost, MailConfig.TLS_PORT);
            if(imapClient.login(userEmail,password)){
                List<String> folders = imapClient.listFolders();
                for(String folder : folders){
                    System.out.println(folder);
                }
                if(imapClient.selectFolder("[Gmail]/Th&AbA- &AREA4w- g&Hu0-i")){ // Thư mục chứa các thư đã gửi đi
                    emails = imapClient.listEmails();
                    for(Email email : emails){
                        listModel.addElement(email.getSubject());
                    }
                }
                else{
                    System.out.println("Failed to select folder");
                }
            }
            else{
                System.out.println("Login failed");
            }
        }
        catch(IOException ex){
            ex.printStackTrace();
        }
    }
    
    private void displayEmailDetails(int index){
        Email email = emails.get(index);
        lb_subject.setText(email.getSubject());
        txt_senderName.setText(email.getSender());
        txt_sentDate.setText(email.getDate());
        txt_recipient.setText(email.getRecipient());
        txt_message.setText(email.getBody());
//        txt_attachment.setText(email.isHasAttachment() ? "Có tệp đính kèm" : "Không có tệp đính kèm");
        if(email.isHasAttachment()){
            txt_attachmentFile.setText(email.getAttachmentName());
            btn_attachment.setEnabled(true);
        }
        else{
            txt_attachmentFile.setText("No attachment");
            btn_attachment.setEnabled(false);
                    
        }
    }
    
    private void btn_homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_homeActionPerformed
        
    }//GEN-LAST:event_btn_homeActionPerformed

    private void jmenu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenu_exitActionPerformed
        Frm_Home frm_Home = new Frm_Home(userEmail,password);
        frm_Home.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jmenu_exitActionPerformed

    private void listMailSentValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listMailSentValueChanged
        if(!evt.getValueIsAdjusting()){
            int selectedIndex = listMailSent.getSelectedIndex();
            if(selectedIndex != -1){
                displayEmailDetails(selectedIndex);
            }
        }
    }//GEN-LAST:event_listMailSentValueChanged

    private void btn_attachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_attachmentActionPerformed
        int selectedIndex = listMailSent.getSelectedIndex();
        if(selectedIndex != -1){
            Email email = emails.get(selectedIndex);
            if(email.isHasAttachment()){
                try{
                    byte[] attachmentData = imapClient.downloadAttachment(email.getId(), email.getAttachmentName());
                    saveAndOpenAttachment(attachmentData, email.getAttachmentName());
                }
                    catch(IOException ex){
                    JOptionPane.showMessageDialog(this, "Error downloading attachment: " + ex.getMessage(), "Download Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btn_attachmentActionPerformed

    private void saveAndOpenAttachment(byte[] attachmentData, String fileName) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Attachment");
        fileChooser.setSelectedFile(new File(fileName)); // Đặt tên file mặc định
    
        // Hiển thị hộp thoại lưu file
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (FileOutputStream fos = new FileOutputStream(fileToSave)) {
                fos.write(attachmentData);
                // Mở file sau khi lưu
                Desktop.getDesktop().open(fileToSave);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving or opening attachment: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
        
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchTerm = txt_search.getText().trim();
        if (!searchTerm.isEmpty()) {
            listModel.clear(); // Xóa danh sách hiện tại
            try {
                // Kiểm tra xem từ khóa có chứa '@' không
                if (searchTerm.contains("@")) {
                    // Chỉ lấy phần trước '@'
                    searchTerm = searchTerm.substring(0, searchTerm.indexOf("@"));
                }

                // Sử dụng từ không dấu để tìm kiếm
                String normalizedSearchTerm = imapClient.removeDiacritics(imapClient.normalizeString(searchTerm));
                List<Email> searchResults = imapClient.searchEmails(normalizedSearchTerm); // Gọi phương thức tìm kiếm mới
                emails = searchResults; // Cập nhật danh sách email hiển thị

                if (emails.isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Không tìm thấy email nào với từ khóa: " + searchTerm);
                } else {
                    // Thêm tiêu đề email vào danh sách hiển thị nếu có chứa từ khóa (có dấu và không dấu)
                    for (Email email : emails) {
                        String subject = email.getSubject();
                        String body = email.getBody();
                        String recipient = email.getRecipient();
                        String sender = email.getSender();

                        // Kiểm tra cả tiêu đề, nội dung và người gửi
                        if (imapClient.containsSearchTerms(subject, searchTerm) || 
                            imapClient.containsSearchTerms(body, searchTerm) || 
                            imapClient.containsSearchTerms(recipient, searchTerm) || 
                            imapClient.containsSearchTerms(subject, normalizedSearchTerm) || 
                            imapClient.containsSearchTerms(body, normalizedSearchTerm) || 
                            imapClient.containsSearchTerms(recipient, normalizedSearchTerm) ||
                            imapClient.containsSearchTerms(sender, searchTerm) ||     
                            imapClient.containsSearchTerms(sender, normalizedSearchTerm)) {
                            listModel.addElement(subject);
                        }
                    }

                    if (listModel.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Không tìm thấy email nào với từ khóa chính xác: " + searchTerm);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm email: " + e.getMessage());
            }
        } else {
            // Hiển thị thông báo khi không nhập từ khóa
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa tìm kiếm.");
            // Tải lại danh sách email đã gửi
            loadSentEmails();
        }
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void loadSentEmails() {
        listModel.clear(); // Xóa danh sách hiện tại

        try {
            emails = imapClient.listEmails(); // Lấy lại danh sách email
            // Thêm tiêu đề vào danh sách hiển thị
            for (Email email : emails) {
                listModel.addElement(email.getSubject());
            }
        } catch (IOException ex) {
            ex.printStackTrace(); // Xử lý ngoại lệ nếu có lỗi xảy ra
            javax.swing.JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách email: " + ex.getMessage());
        }
    }
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedIndex = listMailSent.getSelectedIndex(); // Lấy chỉ số của email được chọn trong danh sách
        if (selectedIndex != -1) { // Kiểm tra xem có email nào được chọn hay không
            Email emailToDelete = emails.get(selectedIndex); // Lấy đối tượng email từ danh sách email dựa trên chỉ số được chọn
            try {
                // Di chuyển email vào thùng rác bằng phương thức moveToTrash từ imapClient
                boolean success = imapClient.moveToTrash(emailToDelete.getId());

                if (success) {
                    // Cập nhật lại danh sách: xóa email vừa được di chuyển khỏi danh sách
                    listModel.remove(selectedIndex);
                    emails.remove(selectedIndex); 

                    // Xóa chi tiết của email khỏi giao diện (reset các ô nhập liệu)
                    lb_subject.setText(""); 
                    txt_senderName.setText("");
                    txt_sentDate.setText("");
                    txt_recipient.setText("");
                    txt_message.setText("");
                    txt_attachmentFile.setText("");

                    // Hiển thị thông báo thành công
                    JOptionPane.showMessageDialog(this, "The email has been successfully delivered to the box!");
                } else {
                    // Hiển thị thông báo lỗi nếu không di chuyển được email
                    JOptionPane.showMessageDialog(this, "Email could not be moved to trash.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
                // Hiển thị thông báo lỗi nếu có ngoại lệ xảy ra
                JOptionPane.showMessageDialog(this, "An error occurred while transferring email: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Hiển thị thông báo nếu không có email nào được chọn
            JOptionPane.showMessageDialog(this, "Please select email to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm_ListMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm_ListMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm_ListMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_ListMailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frm_ListMailSend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btn_attachment;
    private javax.swing.JMenu btn_home;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem jmenu_exit;
    private javax.swing.JLabel lb_subject;
    private javax.swing.JList<String> listMailSent;
    private javax.swing.JTextField txt_attachmentFile;
    private javax.swing.JTextArea txt_message;
    private javax.swing.JTextField txt_recipient;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_senderName;
    private javax.swing.JTextField txt_sentDate;
    // End of variables declaration//GEN-END:variables
}
